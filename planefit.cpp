/*************************************************************************/
// Mex file for C++ version of SYNS plane fit
//
// This is mostly based on Alex Muryy's code for the SYNS Sci Rep paper,
// but runs at a single point with a specified list of 300 "neighbor"
// points, ordered by increasing distance.
//
// When recompiling, remember to include your path to the Eigen libraries:
// mex -I"C:\path_to_library\Eigen" planefit.cpp
//
// If you don't have the Eigen libraries you can download them from:
// http://eigen.tuxfamily.org
//
// K. A. Ehinger
/*************************************************************************/
//
// Usage:
// [k,norm,mean] = planefit(x,y,z,NNx,NNy,NNz);
// [k,norm,mean,inK] = planefit(x,y,z,NNx,NNy,NNz);
//
// Input:
// x, y, z = coordinates of the starting point for the algorithm (doesn't
//     need to be a member of the list of neighbor points, but it can be)
// NNx, NNy, NNz = vectors of the coordinates of the KMAX nearest
//     neighbors, sorted in order of increasing distance.
//
// Output:
// k = number of points in final neighborhood ("real" k, which excludes
//     outliers)
// norm = normal of the fit plane
// mean = mean (x,y,z) coordinates of the k points in the final
//     neighborhood
// inK = list of 1/0 values to indicate which of the input points are in
//     the final set of k (this output is optional)
//
/*************************************************************************/
//
// Major changes:
//  - Dropped the degenerate line test (check whether all points are from
//    the same row/column in the original range map), because this function
//    doesn't have that info. Also, this test is redundant with the L1/L0
//    ratio test.
//  - If all neighborhoods fail the L1/L0 ratio test, this code returns
//    mean and normal = [0 0 0] and k=KMAX. The original code returned
//    k=KMAX but also computed mean and normal for the degenerate
//    neighborhood.
//  - Rule for selecting the "best" K neighborhood was changed. The
//    original code identified neighborhoods with variance over threshold
//    chose the one with lowest variance. This code identifies
//    neighborhoods with variance over threshold and chooses the one with
//    smallest K.
//  - This code requires exactly KMAX neighbors as input (I'll fix this
//    later).
//
/*************************************************************************/

#include <iostream>
#include <vector>
#include <math.h>
#include <string>
#include "mex.h"

#include <Eigen\Eigen>
#include <Eigen\Dense>
#include <Eigen\Eigenvalues>
#include <Eigen\Core>

#define KMAX 300
#define KMIN 7

using namespace Eigen;
using Eigen::MatrixXf;
using namespace std;

void _main();

/****************************/
class PlaneFit {

public:
	void display();
	void set_data(double x0, double y0, double z0, double* NNx, double* NNy, double* NNz);
	void find_best_k();
	int return_k();
	vector<double> return_norm();
	vector<double> return_mean();
	vector<bool> return_members();
	PlaneFit();
    ~PlaneFit() {};
private:
	double x;
	double y;
	double z;
	vector<double> ptx;
	vector<double> pty;
	vector<double> ptz;
	int knn;
	vector<double> norm;
	vector<double> mean;
    vector<bool> membersK;
};

PlaneFit::PlaneFit()
{
	x = 0;
	y = 0;
	z = 0;
	knn = 0;
	for (int i = 0; i < 3; i++)
	{
        norm.push_back(0);
        mean.push_back(0);
    }
	for (int i = 0; i < KMAX; i++)
	{
		membersK.push_back(0);
    }
}

void PlaneFit::display()
{
	#ifdef _WIN32
		mexPrintf("xyz = %g %g %g\n", x, y, z);
		mexPrintf("pts(1,:) = %g %g %g\n", ptx[0], pty[0], ptz[0]);
		mexPrintf("pts(2,:) = %g %g %g\n", ptx[1], pty[1], ptz[1]);
		mexPrintf("pts(3,:) = %g %g %g\n", ptx[2], pty[2], ptz[2]);
		mexPrintf("k = %d\n", knn);
		mexPrintf("norm = %g %g %g\n", norm[0], norm[1], norm[2]);
		mexPrintf("mean = %g %g %g\n\n", mean[0], mean[1], mean[2]);
	#else
		cout << "xyz = " << x << " " << y << " " << z << "\n";
		cout << "pts(1,:) = " << ptx[0] << " " << pty[0] << " " << ptz[0] << "\n";
		cout << "pts(2,:) = " << ptx[1] << " " << pty[1] << " " << ptz[1] << "\n";
		cout << "pts(3,:) = " << ptx[2] << " " << pty[2] << " " << ptz[2] << "\n";
		cout << "k = " << knn << "\n";
		cout << "norm = " << norm[0] << " " << norm[1] << " " << norm[2] << "\n";
		cout << "mean = " << mean[0] << " " << mean[1] << " " << mean[2] << "\n\n";
	#endif
}

void PlaneFit::set_data(double x0, double y0, double z0, double* NNx, double* NNy, double* NNz)
{
	x = x0;
	y = y0;
	z = z0;
	for (int i = 0; i < KMAX; i++)
	{
		ptx.push_back(NNx[i]);
		pty.push_back(NNy[i]);
		ptz.push_back(NNz[i]);
    }
}

void PlaneFit::find_best_k()
{
	// Values chosen for SYNS Sci Rep paper
	float sigmaMultiplier = 3;
	int threshold_ind = 1;
    float minL1L0 = 0.3;
	
	// Thresholds
	MatrixXf var_threshold(5, 294);
    if(threshold_ind == 1)
	{
    	// MAX, from K=7 to K=300, step 1; 294 values
		var_threshold << 	7.255935, 8.778492, 8.971352, 8.304552, 8.241694, 7.388811, 7.402876, 6.740723, 6.333696, 6.292398, 6.183097, 5.785250, 5.625499, 5.339289, 5.107216, 5.215055, 5.094433, 5.504746, 5.012219, 5.228410, 5.181787, 5.047122, 4.866626, 4.990721, 5.455399, 5.291837, 5.436662, 5.299758, 5.167767, 5.026849, 4.940824, 4.851166, 4.673515, 4.779891, 4.642774, 4.556215, 4.446212, 3.988027, 4.067264, 4.026406, 3.904685, 3.818389, 3.748471, 3.633363, 3.575968, 3.702776, 3.629494, 3.576368, 3.691962, 3.682406, 3.614279, 3.702185, 3.640653, 3.583974, 3.576780, 3.603322, 3.549756, 3.498980, 3.464303, 3.418521, 3.367581, 3.570963, 3.535309, 3.483553, 3.435751, 3.421738, 3.377283, 3.337435, 3.327606, 3.286581, 3.258915, 3.223406, 3.180993, 3.188922, 3.191353, 3.151441, 3.113213, 3.047054, 3.020967, 3.009923, 2.975540, 2.941614, 2.829786, 2.793771, 2.837902, 2.845765, 3.059333, 3.025996, 2.993939, 2.991190, 3.041076, 2.943397, 2.841652, 2.879627, 2.989603, 2.959758, 2.931612, 2.928615, 2.940722, 3.020000, 2.991860, 2.965964, 2.937983, 2.910549, 2.885909, 2.798920, 2.867917, 2.867013, 2.874045, 2.886895, 2.863506, 2.853033, 2.908121, 2.883719, 2.827718, 2.758581, 2.761130, 2.727397, 2.712910, 2.734826, 2.974792, 2.951022, 2.933749, 2.912178, 2.922988, 2.973327, 2.957730, 2.938521, 2.921741, 2.901221, 2.969248, 3.048016, 3.027725, 3.005649, 3.060953, 3.040816, 3.023085, 3.001714, 2.982134, 2.967177, 2.994668, 2.976390, 2.956278, 2.940067, 2.939363, 2.953613, 2.963664, 2.947443, 2.933737, 2.923210, 2.909725, 2.905042, 2.900804, 2.887491, 2.884833, 2.876047, 2.888801, 2.920594, 2.955095, 2.936992, 2.935327, 2.918204, 2.961726, 2.987013, 2.969292, 2.998788, 2.981148, 2.966972, 2.962218, 2.946002, 2.940475, 2.913888, 2.935760, 2.935233, 2.899683, 2.885657, 2.869928, 3.162416, 3.145451, 3.139839, 3.123159, 3.106313, 3.090096, 3.074131, 3.057780, 3.046924, 3.001552, 3.017413, 2.965089, 2.988480, 2.988956, 2.980879, 2.973786, 2.952586, 2.797749, 3.005206, 3.039686, 3.024677, 2.989675, 2.975496, 2.968414, 2.954140, 2.943343, 2.929171, 3.032969, 3.018920, 3.007599, 2.995173, 2.981647, 2.968626, 3.007146, 2.997073, 2.998656, 2.999845, 2.986310, 2.973499, 2.961491, 2.948261, 3.064618, 3.054048, 3.040741, 3.029502, 3.047057, 3.035868, 3.029097, 3.016031, 3.013837, 3.004083, 2.946815, 3.003225, 2.940886, 3.057340, 3.044386, 2.995113, 2.985270, 2.973692, 2.963385, 2.955772, 2.951638, 2.935243, 2.934212, 2.923977, 2.913927, 2.902517, 2.891027, 2.884034, 2.877843, 2.866462, 2.873195, 2.862725, 2.851536, 2.842677, 2.831803, 2.912732, 2.904222, 2.781249, 2.886581, 2.876115, 2.829682, 2.824150, 2.825793, 2.815435, 2.826387, 2.815207, 2.826980, 2.827141, 2.797093, 2.787824, 2.809878, 2.823526, 2.814196, 2.804297, 2.798637, 2.796363, 2.889805, 2.910475, 2.906870, 2.900167, 2.898371, 2.921569, 2.926886, 2.917222, 2.910336, 2.900774, 2.890764, 2.888320, 2.878361, 2.869236, 2.859678, 2.849938, 2.841200, 2.832351, 2.823142, 2.820577,
						 	8.849881, 8.804040, 8.412235, 7.852387, 8.248975, 7.688016, 7.831224, 7.145622, 6.550393, 6.046542, 5.637430, 5.271822, 5.036208, 3.374348, 5.039864, 3.719642, 3.548072, 3.406850, 3.321646, 3.274692, 3.677345, 3.564660, 3.428071, 3.301728, 3.184038, 3.074406, 3.027030, 2.608344, 2.578112, 2.532592, 2.716663, 2.641330, 2.643273, 2.656977, 2.598319, 2.532355, 2.472350, 2.519904, 2.466261, 2.530829, 2.482585, 2.439999, 2.388256, 2.338390, 2.303293, 2.256567, 2.273832, 2.230162, 2.192590, 2.152631, 2.119110, 2.080994, 2.071748, 2.281977, 2.257074, 2.063756, 2.264312, 2.227708, 2.200071, 2.253606, 2.280737, 2.017152, 2.058139, 2.010646, 1.994153, 2.021290, 2.026231, 2.038084, 2.013116, 2.115941, 2.096850, 2.186967, 2.210410, 2.203939, 2.176939, 2.152481, 2.160959, 2.203160, 2.199171, 2.184375, 2.178183, 2.157534, 2.155936, 2.133759, 2.112686, 2.124724, 2.094263, 2.128012, 2.116219, 2.107751, 2.087647, 2.056509, 2.103480, 2.081815, 2.030977, 2.010368, 1.997880, 1.994680, 2.048516, 1.965386, 1.986340, 2.071769, 2.058684, 2.043849, 2.025302, 2.013671, 2.014177, 2.003045, 1.994237, 1.987295, 1.969938, 1.956093, 1.939522, 1.938219, 1.940145, 1.934996, 1.948841, 1.937363, 1.943343, 1.930566, 1.928905, 1.920865, 1.967685, 1.960817, 1.946744, 1.935120, 1.932376, 1.918367, 1.908475, 1.904467, 1.922738, 1.911627, 1.902888, 1.904127, 1.895412, 1.886388, 1.933700, 1.890970, 1.911551, 1.901645, 1.888819, 1.876139, 1.880495, 1.922557, 1.871604, 1.925011, 1.915152, 1.905618, 1.895743, 1.894101, 1.883575, 1.881155, 1.870996, 1.863155, 1.853213, 1.842559, 1.840677, 1.831635, 1.823806, 1.831889, 1.843788, 1.833270, 1.822363, 1.826342, 1.833742, 1.831660, 1.841043, 1.831137, 1.846890, 1.841798, 1.841974, 1.835582, 1.843446, 1.881584, 1.875433, 1.867841, 1.861823, 1.859304, 1.864746, 1.881154, 1.874923, 1.881333, 1.877737, 1.872291, 1.887251, 1.882619, 1.876150, 1.872303, 1.867222, 1.862673, 1.865207, 1.856955, 1.893291, 1.888989, 1.903101, 1.898480, 1.892680, 1.883942, 1.888767, 1.882115, 1.875293, 1.867502, 1.859855, 1.851506, 1.848746, 1.932586, 1.933487, 1.928412, 1.920801, 1.922161, 1.915055, 1.907357, 1.900507, 1.891762, 1.886868, 1.882785, 1.884134, 1.877134, 1.869216, 1.860981, 1.852978, 1.851173, 1.848708, 1.842433, 1.835218, 1.845349, 1.839992, 1.834260, 1.836510, 1.830946, 1.823127, 1.818811, 1.812285, 1.814104, 1.808062, 1.806674, 1.806333, 1.807131, 1.799837, 1.792617, 1.786570, 1.799047, 1.793207, 1.785960, 1.782070, 1.780846, 1.773740, 1.775977, 1.770382, 1.772057, 1.765766, 1.758929, 1.763588, 1.761673, 1.770208, 1.771259, 1.764796, 1.760198, 1.753918, 1.753113, 1.746474, 1.738190, 1.733674, 1.727362, 1.723823, 1.717434, 1.715681, 1.709355, 1.732781, 1.768352, 1.771822, 1.781236, 1.783315, 1.776887, 1.771114, 1.765517, 1.762817, 1.760422, 1.754602, 1.748437, 1.743055, 1.750936, 1.745755, 1.739756, 1.738406, 1.732934, 1.727123, 1.723636, 1.719713, 1.712563, 1.713866, 1.708501, 1.705557, 1.703674,
						 	9.593072, 7.715913, 6.997796, 6.120841, 5.550725, 5.021027, 4.574231, 3.815839, 3.594150, 3.273098, 3.245502, 3.213968, 3.014825, 2.859103, 3.188803, 3.026436, 2.888395, 2.798060, 2.773541, 2.660256, 2.558493, 2.534250, 2.599825, 2.630427, 2.641761, 2.555262, 2.579676, 2.584816, 2.523389, 2.478180, 2.435611, 2.374382, 2.378538, 2.316249, 2.294889, 2.239010, 2.183911, 2.135427, 2.084991, 2.036867, 2.061352, 2.022335, 1.980889, 1.947051, 1.924169, 1.926172, 1.892110, 1.912224, 1.878664, 1.847957, 1.820479, 1.838076, 1.837689, 1.815684, 1.795675, 1.768982, 1.773552, 1.746130, 1.727709, 1.701718, 1.697034, 1.675599, 1.650324, 1.644705, 1.654014, 1.634989, 1.612893, 1.637336, 1.574988, 1.577660, 1.557696, 1.538646, 1.518721, 1.444214, 1.543909, 1.534982, 1.517984, 1.500575, 1.482277, 1.464666, 1.456845, 1.449974, 1.307611, 1.364174, 1.356207, 1.366173, 1.458975, 1.450325, 1.434584, 1.359909, 1.345521, 1.336156, 1.364304, 1.333572, 1.420210, 1.431236, 1.442558, 1.431450, 1.445577, 1.431738, 1.419419, 1.406400, 1.393160, 1.333027, 1.326604, 1.351194, 1.339774, 1.327858, 1.331105, 1.327877, 1.317692, 1.251436, 1.415213, 1.295054, 1.284247, 1.273502, 1.265144, 1.265953, 1.282190, 1.272377, 1.276103, 1.268397, 1.266441, 1.267366, 1.259872, 1.255021, 1.255425, 1.250918, 1.261293, 1.254468, 1.250451, 1.246224, 1.237860, 1.237503, 1.251731, 1.244081, 1.237253, 1.228811, 1.241635, 1.246078, 1.240410, 1.237819, 1.231636, 1.260009, 1.257586, 1.259554, 1.254650, 1.248695, 1.251653, 1.243504, 1.243766, 1.241936, 1.274037, 1.266226, 1.259137, 1.253971, 1.250990, 1.247430, 1.241047, 1.237505, 1.236964, 1.238233, 1.233507, 1.236026, 1.231865, 1.228359, 1.226055, 1.227254, 1.224079, 1.229788, 1.224925, 1.223602, 1.225466, 1.219599, 1.224204, 1.220792, 1.214969, 1.215991, 1.235520, 1.235026, 1.228626, 1.222879, 1.223320, 1.222708, 1.217585, 1.217586, 1.225494, 1.237644, 1.231827, 1.231033, 1.236643, 1.248471, 1.249566, 1.261360, 1.239113, 1.232894, 1.228841, 1.227190, 1.223091, 1.222039, 1.232469, 1.226475, 1.220927, 1.215063, 1.221381, 1.231512, 1.229951, 1.228579, 1.224196, 1.220493, 1.224004, 1.221958, 1.217321, 1.217499, 1.218138, 1.219361, 1.223761, 1.229467, 1.225134, 1.226541, 1.226661, 1.221225, 1.246574, 1.252178, 1.246969, 1.257792, 1.253457, 1.250247, 1.248618, 1.244935, 1.259360, 1.254835, 1.212592, 1.207522, 1.202584, 1.188693, 1.183774, 1.181709, 1.177214, 1.174600, 1.174298, 1.193431, 1.188979, 1.182396, 1.173931, 1.184992, 1.196436, 1.192962, 1.195319, 1.191890, 1.190461, 1.189280, 1.185631, 1.181123, 1.155622, 1.201454, 1.197002, 1.175150, 1.155080, 1.151374, 1.152784, 1.161669, 1.160791, 1.160948, 1.152998, 1.145110, 1.147475, 1.143248, 1.144078, 1.186671, 1.159979, 1.155791, 1.151682, 1.155098, 1.151087, 1.156658, 1.142843, 1.156252, 1.138675, 1.135258, 1.134917, 1.131275, 1.127427, 1.123501, 1.121660, 1.122096, 1.120858, 1.123041, 1.150423, 1.159740, 1.155802, 1.153570, 1.159727, 1.161667,
						 	2.930625, 2.609696, 2.188674, 1.955667, 1.780874, 1.716251, 1.589651, 1.551887, 1.532985, 1.476404, 1.532892, 1.459791, 1.401323, 1.363008, 1.319252, 1.343663, 1.281348, 1.243209, 1.315557, 1.345913, 1.420007, 1.425367, 1.432824, 1.380612, 1.334724, 1.307346, 1.265194, 1.238738, 1.296016, 1.334906, 1.297454, 1.264949, 1.232677, 1.243664, 1.265801, 1.238650, 1.222962, 1.193775, 1.180009, 1.188458, 1.230600, 1.217882, 1.228010, 1.201950, 1.178163, 1.154119, 1.175981, 1.154861, 1.147011, 1.143566, 1.163263, 1.147691, 1.131651, 1.113316, 1.132749, 1.115118, 1.110086, 1.115164, 1.109663, 1.106210, 1.091938, 1.100397, 1.083914, 1.068886, 1.058984, 1.049295, 1.037512, 1.022917, 1.014820, 1.011350, 0.998049, 0.987350, 1.020384, 1.007792, 1.005959, 0.994937, 0.998025, 0.991298, 0.980295, 0.969948, 0.960447, 0.954397, 0.947109, 0.953154, 0.956576, 0.946413, 0.948253, 0.940188, 0.942315, 0.936964, 0.936189, 0.938400, 0.928694, 0.920403, 0.932259, 0.934637, 0.932255, 0.923271, 0.914998, 0.910499, 0.903157, 0.896719, 0.894216, 0.898929, 0.891541, 0.886802, 0.916923, 0.915352, 0.915226, 0.908303, 0.902029, 0.895154, 0.888312, 0.886375, 0.884958, 0.881097, 0.874616, 0.871909, 0.870500, 0.867725, 0.862195, 0.855299, 0.868137, 0.861849, 0.859010, 0.857116, 0.860669, 0.857384, 0.850905, 0.849296, 0.843141, 0.837916, 0.832943, 0.832044, 0.830692, 0.827525, 0.823515, 0.820031, 0.821560, 0.815959, 0.813594, 0.809917, 0.812343, 0.810087, 0.808780, 0.810710, 0.809476, 0.805860, 0.807861, 0.802701, 0.801151, 0.798086, 0.797214, 0.801744, 0.799527, 0.796513, 0.791921, 0.787066, 0.793707, 0.788962, 0.784316, 0.785277, 0.787846, 0.785198, 0.789900, 0.786498, 0.783886, 0.779694, 0.775224, 0.775350, 0.779097, 0.774666, 0.770677, 0.774249, 0.781513, 0.778347, 0.774847, 0.781250, 0.789461, 0.786821, 0.784276, 0.783125, 0.783162, 0.779016, 0.776105, 0.781649, 0.777555, 0.774184, 0.774797, 0.770880, 0.768334, 0.770030, 0.769252, 0.774652, 0.774785, 0.770985, 0.770732, 0.767973, 0.764171, 0.764417, 0.762646, 0.762110, 0.758948, 0.762722, 0.759181, 0.757399, 0.760685, 0.761610, 0.764932, 0.766934, 0.765267, 0.765336, 0.763245, 0.759899, 0.758799, 0.762158, 0.761228, 0.761841, 0.761423, 0.760420, 0.757090, 0.754001, 0.750846, 0.750705, 0.751803, 0.750877, 0.749360, 0.746594, 0.746554, 0.748218, 0.745644, 0.746056, 0.743207, 0.740093, 0.752002, 0.751043, 0.749811, 0.751740, 0.748749, 0.746974, 0.748144, 0.747130, 0.744149, 0.752412, 0.751584, 0.751418, 0.759381, 0.756381, 0.753401, 0.752205, 0.749306, 0.746594, 0.750772, 0.748384, 0.748494, 0.745884, 0.745898, 0.744663, 0.742547, 0.746171, 0.743375, 0.744604, 0.741981, 0.742396, 0.739935, 0.740737, 0.739132, 0.736601, 0.734618, 0.732083, 0.736134, 0.734281, 0.741743, 0.739144, 0.737494, 0.734898, 0.733565, 0.739633, 0.739208, 0.738626, 0.736168, 0.738375, 0.736983, 0.735970, 0.733422, 0.731777, 0.729283, 0.727286, 0.724901, 0.738303, 0.736156, 0.734514, 0.732051, 0.729969,
						 	6.514263, 5.543132, 5.256832, 5.368475, 4.858405, 4.578142, 4.265585, 4.048639, 3.825089, 3.777148, 3.831206, 3.761425, 3.604663, 3.395094, 3.208897, 3.300097, 3.160173, 3.017478, 2.967526, 2.789904, 2.763866, 2.767921, 2.669439, 2.671160, 2.634200, 2.577224, 2.587140, 2.569700, 2.500376, 2.446456, 2.396448, 2.360006, 2.296615, 2.334802, 2.545325, 2.510279, 2.218781, 2.448126, 2.130882, 2.144861, 2.219040, 2.169889, 2.213061, 2.292449, 2.143487, 2.102822, 2.090046, 2.202093, 2.178887, 2.141576, 2.284797, 2.244701, 2.212381, 2.213702, 2.269751, 2.239507, 2.259070, 2.240570, 2.224635, 2.196315, 2.181775, 2.159301, 2.146435, 2.121111, 2.094691, 2.067716, 2.050761, 2.033767, 2.045219, 2.022952, 1.998599, 1.973963, 1.953207, 1.935547, 1.911962, 1.893470, 1.871141, 1.855764, 1.833148, 1.811478, 1.790024, 1.671000, 1.647730, 1.699058, 1.682467, 1.670215, 1.662899, 1.662554, 1.682967, 1.664912, 1.647437, 1.643050, 1.653349, 1.646560, 1.629988, 1.615916, 1.617589, 1.604283, 1.608826, 1.594485, 1.604589, 1.608342, 1.594355, 1.594400, 1.580159, 1.570542, 1.560245, 1.556596, 1.572565, 1.554905, 1.541944, 1.553708, 1.550405, 1.573059, 1.611313, 1.602570, 1.596413, 1.586523, 1.592616, 1.583516, 1.591382, 1.587786, 1.577865, 1.567953, 1.560026, 1.515321, 1.563295, 1.505759, 1.500536, 1.505425, 1.512618, 1.507534, 1.518127, 1.516957, 1.512866, 1.510832, 1.526115, 1.532708, 1.524549, 1.520979, 1.514972, 1.513949, 1.504925, 1.499828, 1.495220, 1.500879, 1.491762, 1.492429, 1.490455, 1.485673, 1.486068, 1.479357, 1.471335, 1.461974, 1.470808, 1.412349, 1.405262, 1.400616, 1.393244, 1.385059, 1.383729, 1.380802, 1.381058, 1.391531, 1.390401, 1.388844, 1.387780, 1.386003, 1.382394, 1.376055, 1.381150, 1.377343, 1.370306, 1.390045, 1.400248, 1.407089, 1.402234, 1.416365, 1.409346, 1.422471, 1.396703, 1.379018, 1.407020, 1.407065, 1.402370, 1.399571, 1.399515, 1.395085, 1.391303, 1.384635, 1.377499, 1.370454, 1.373201, 1.377136, 1.374815, 1.367914, 1.370145, 1.364038, 1.359521, 1.356609, 1.351719, 1.357293, 1.350885, 1.368089, 1.371652, 1.367337, 1.366145, 1.358944, 1.366147, 1.409835, 1.410999, 1.407194, 1.402015, 1.397325, 1.391022, 1.385297, 1.379005, 1.374543, 1.368361, 1.379913, 1.373753, 1.369026, 1.377401, 1.372959, 1.370064, 1.370558, 1.371187, 1.366652, 1.362633, 1.357691, 1.354305, 1.357478, 1.351802, 1.349033, 1.349387, 1.399856, 1.394269, 1.388495, 1.387814, 1.389892, 1.385334, 1.379730, 1.372634, 1.384245, 1.387362, 1.377395, 1.383068, 1.381392, 1.388005, 1.386324, 1.383849, 1.387343, 1.393496, 1.388976, 1.386718, 1.381495, 1.396160, 1.411593, 1.406439, 1.403492, 1.398587, 1.393725, 1.388522, 1.386065, 1.379072, 1.387264, 1.385231, 1.389407, 1.389791, 1.386419, 1.381936, 1.378338, 1.374988, 1.369909, 1.366049, 1.363200, 1.356727, 1.355199, 1.355729, 1.351568, 1.349452, 1.344451, 1.344136, 1.337593, 1.335775, 1.332737, 1.330821, 1.326971, 1.327533, 1.330263, 1.335437, 1.338536, 1.339879, 1.339550;
    }
    else
	{
    	// PERCENTILE 99
		var_threshold << 	1.652401, 1.780872, 1.938406, 2.014194, 2.134548, 2.263206, 2.344515, 2.386434, 2.412795, 2.395413, 2.394220, 2.431098, 2.458210, 2.438964, 2.429650, 2.420512, 2.387804, 2.410102, 2.343938, 2.328364, 2.340937, 2.282211, 2.300952, 2.240912, 2.251787, 2.234531, 2.261430, 2.244916, 2.264012, 2.288675, 2.262761, 2.251719, 2.237319, 2.224194, 2.227597, 2.216886, 2.235380, 2.271757, 2.275687, 2.278903, 2.241233, 2.228248, 2.211426, 2.191126, 2.184013, 2.160361, 2.141306, 2.124815, 2.117274, 2.131074, 2.094074, 2.115125, 2.101444, 2.081490, 2.104718, 2.085467, 2.088587, 2.097401, 2.134242, 2.147783, 2.167684, 2.172346, 2.180976, 2.183313, 2.176595, 2.164636, 2.152997, 2.142019, 2.132133, 2.128975, 2.123745, 2.110415, 2.122435, 2.107191, 2.099443, 2.105611, 2.130255, 2.133370, 2.125297, 2.130220, 2.137620, 2.142363, 2.137955, 2.146771, 2.155230, 2.183145, 2.180654, 2.191583, 2.195854, 2.199260, 2.207393, 2.206251, 2.204685, 2.205174, 2.198507, 2.206292, 2.213325, 2.199138, 2.201063, 2.194046, 2.193465, 2.205432, 2.202525, 2.215048, 2.221670, 2.214022, 2.224213, 2.227649, 2.238697, 2.234599, 2.243218, 2.229415, 2.233263, 2.246696, 2.228937, 2.231176, 2.233222, 2.233980, 2.230523, 2.238427, 2.230642, 2.229082, 2.237560, 2.232192, 2.237167, 2.236780, 2.247247, 2.253034, 2.263653, 2.263486, 2.278770, 2.273141, 2.267307, 2.278750, 2.289081, 2.304174, 2.296876, 2.296903, 2.299339, 2.297188, 2.297346, 2.295561, 2.280596, 2.285203, 2.282733, 2.277766, 2.275320, 2.268928, 2.267867, 2.270096, 2.270943, 2.267989, 2.267405, 2.285719, 2.277069, 2.277180, 2.285117, 2.290037, 2.292392, 2.293665, 2.297239, 2.312233, 2.317863, 2.317080, 2.311402, 2.317864, 2.328714, 2.322177, 2.330898, 2.330583, 2.338825, 2.338901, 2.334442, 2.344077, 2.334020, 2.337256, 2.332435, 2.326104, 2.328263, 2.325128, 2.329105, 2.328437, 2.324807, 2.321687, 2.327114, 2.331887, 2.335201, 2.324545, 2.316963, 2.313199, 2.311268, 2.319297, 2.311743, 2.315487, 2.312935, 2.319293, 2.324128, 2.322923, 2.306574, 2.323591, 2.322542, 2.322151, 2.325346, 2.337709, 2.332676, 2.331462, 2.341297, 2.329175, 2.332858, 2.337081, 2.332850, 2.343291, 2.344415, 2.346702, 2.344746, 2.338084, 2.341413, 2.340249, 2.339538, 2.335969, 2.331003, 2.335801, 2.340910, 2.331125, 2.335396, 2.330803, 2.336427, 2.341100, 2.333099, 2.338031, 2.335556, 2.340379, 2.343271, 2.343310, 2.346916, 2.349756, 2.352443, 2.354714, 2.347880, 2.346484, 2.351501, 2.351814, 2.340271, 2.342101, 2.336935, 2.335329, 2.332286, 2.338616, 2.338242, 2.334304, 2.335311, 2.327804, 2.328051, 2.320680, 2.324202, 2.323960, 2.322255, 2.321817, 2.318661, 2.317820, 2.316055, 2.317779, 2.318038, 2.311196, 2.319481, 2.330300, 2.329047, 2.333000, 2.328696, 2.328552, 2.324877, 2.335533, 2.336545, 2.337491, 2.332385, 2.338335, 2.343818, 2.355259, 2.341825, 2.342195, 2.339807, 2.340240, 2.348063, 2.339874, 2.341448, 2.337910, 2.328249, 2.332028, 2.318834, 2.328567, 2.326177, 2.323644, 2.321682, 2.323387,
							1.373717, 1.430873, 2.178762, 2.232862, 2.181521, 2.229176, 2.295081, 2.147637, 1.943047, 1.658506, 1.398370, 1.266890, 1.227987, 1.275810, 1.493680, 1.433199, 1.384419, 1.370507, 1.375953, 1.342977, 1.312942, 1.304991, 1.302541, 1.274673, 1.266970, 1.259929, 1.240091, 1.224768, 1.238037, 1.278435, 1.348460, 1.334507, 1.313670, 1.309392, 1.304429, 1.300276, 1.302351, 1.327676, 1.349424, 1.347198, 1.346953, 1.351449, 1.357525, 1.352444, 1.350524, 1.354783, 1.349713, 1.344192, 1.348959, 1.350198, 1.346032, 1.353061, 1.353639, 1.363961, 1.364607, 1.353211, 1.344104, 1.349129, 1.343308, 1.337533, 1.330474, 1.363733, 1.368931, 1.357151, 1.350289, 1.338933, 1.339359, 1.337010, 1.329598, 1.324177, 1.328950, 1.332762, 1.330631, 1.333715, 1.331324, 1.324981, 1.328129, 1.322002, 1.325263, 1.330926, 1.328861, 1.352305, 1.356214, 1.352576, 1.352647, 1.357819, 1.361268, 1.361378, 1.357035, 1.381010, 1.385482, 1.387242, 1.382007, 1.389379, 1.380875, 1.368958, 1.366742, 1.361750, 1.355865, 1.353585, 1.353206, 1.362618, 1.362086, 1.360465, 1.360412, 1.354491, 1.353172, 1.351765, 1.348883, 1.345223, 1.347207, 1.356271, 1.358851, 1.362734, 1.362069, 1.358867, 1.357407, 1.358458, 1.361223, 1.356930, 1.354652, 1.358246, 1.354792, 1.346436, 1.344453, 1.351178, 1.348917, 1.359393, 1.352425, 1.365657, 1.364216, 1.363062, 1.361299, 1.363286, 1.363310, 1.366879, 1.361748, 1.369574, 1.373074, 1.373417, 1.374172, 1.368991, 1.365073, 1.367667, 1.367255, 1.361924, 1.357230, 1.352584, 1.360086, 1.352819, 1.352732, 1.359714, 1.351046, 1.349899, 1.353517, 1.346289, 1.339221, 1.343941, 1.347134, 1.342446, 1.341872, 1.341155, 1.340809, 1.336649, 1.339860, 1.343469, 1.354462, 1.348513, 1.353383, 1.360668, 1.358155, 1.355868, 1.353876, 1.350227, 1.357263, 1.353030, 1.355527, 1.350660, 1.348461, 1.345106, 1.344208, 1.346582, 1.346551, 1.343815, 1.347503, 1.348899, 1.345066, 1.348164, 1.344824, 1.340333, 1.338600, 1.335319, 1.332466, 1.337253, 1.337686, 1.333718, 1.328183, 1.328249, 1.325911, 1.326512, 1.331349, 1.326611, 1.324312, 1.326303, 1.326687, 1.329440, 1.321291, 1.327242, 1.326928, 1.336978, 1.337063, 1.333045, 1.326257, 1.337469, 1.335208, 1.333168, 1.329490, 1.324724, 1.325474, 1.326964, 1.322306, 1.321815, 1.317771, 1.322732, 1.316081, 1.320374, 1.315612, 1.319412, 1.314645, 1.320432, 1.321922, 1.322380, 1.316577, 1.330044, 1.324637, 1.326171, 1.326400, 1.325454, 1.320838, 1.319209, 1.318383, 1.321217, 1.320859, 1.313933, 1.312412, 1.312200, 1.315185, 1.314885, 1.317792, 1.315986, 1.313761, 1.304496, 1.301815, 1.307315, 1.308935, 1.312507, 1.308031, 1.302628, 1.301606, 1.304890, 1.304933, 1.297889, 1.294880, 1.305912, 1.308760, 1.309190, 1.302070, 1.306154, 1.305327, 1.317698, 1.313486, 1.317019, 1.309314, 1.301570, 1.301830, 1.301056, 1.304105, 1.304652, 1.308623, 1.303341, 1.308507, 1.314725, 1.314329, 1.307537, 1.305628, 1.315173, 1.313547, 1.315902, 1.317390, 1.310765, 1.311475, 1.311485, 1.305839, 1.310181,
							2.082063, 2.096413, 2.615627, 2.420868, 2.369208, 2.324201, 2.283220, 2.121950, 1.803234, 1.655017, 1.505061, 1.444893, 1.399525, 1.363872, 1.522479, 1.472999, 1.463172, 1.478839, 1.513754, 1.435184, 1.397505, 1.377362, 1.374302, 1.349777, 1.347220, 1.332444, 1.327278, 1.301539, 1.327888, 1.312269, 1.342082, 1.326042, 1.329001, 1.321793, 1.311820, 1.319075, 1.347552, 1.332070, 1.333378, 1.333540, 1.371927, 1.373587, 1.390677, 1.389199, 1.404133, 1.401310, 1.383910, 1.403956, 1.408022, 1.414453, 1.400588, 1.387921, 1.358953, 1.367746, 1.392439, 1.369239, 1.378342, 1.361721, 1.369208, 1.381054, 1.365276, 1.333481, 1.324145, 1.384319, 1.310218, 1.282084, 1.297340, 1.293846, 1.274380, 1.264271, 1.243763, 1.255231, 1.251541, 1.236105, 1.234344, 1.231217, 1.233896, 1.232468, 1.233188, 1.230474, 1.222431, 1.219165, 1.213679, 1.199859, 1.205367, 1.195861, 1.186800, 1.176301, 1.168881, 1.160571, 1.150141, 1.139476, 1.143842, 1.140635, 1.143744, 1.136867, 1.134375, 1.125249, 1.122965, 1.127480, 1.127555, 1.124459, 1.138586, 1.142420, 1.140143, 1.134965, 1.134947, 1.133414, 1.142692, 1.140380, 1.145354, 1.141863, 1.138098, 1.140816, 1.140419, 1.138335, 1.142596, 1.136080, 1.140680, 1.141133, 1.137287, 1.136312, 1.137421, 1.137292, 1.134674, 1.142656, 1.138009, 1.135461, 1.146162, 1.146280, 1.152786, 1.152984, 1.158524, 1.166224, 1.168351, 1.168611, 1.170091, 1.167768, 1.165146, 1.169029, 1.168892, 1.164068, 1.163625, 1.163506, 1.158736, 1.158323, 1.156885, 1.155269, 1.151902, 1.154053, 1.153536, 1.146690, 1.145264, 1.142269, 1.141782, 1.136942, 1.130505, 1.133733, 1.131718, 1.129297, 1.124577, 1.119854, 1.114337, 1.112281, 1.109013, 1.103890, 1.112848, 1.110111, 1.104579, 1.104971, 1.107063, 1.102859, 1.102746, 1.102863, 1.101049, 1.101313, 1.102604, 1.093383, 1.095519, 1.083638, 1.084532, 1.092042, 1.088740, 1.085861, 1.039633, 1.073825, 1.061587, 1.050690, 1.059709, 1.065653, 1.042254, 1.054880, 1.042325, 1.037843, 1.016370, 1.025688, 1.019505, 1.011776, 1.038260, 1.025236, 1.047511, 1.037223, 1.018624, 0.993540, 1.003450, 1.004796, 1.007864, 0.999071, 1.044362, 1.020457, 1.015614, 1.033324, 1.025239, 1.009067, 1.029599, 1.025177, 1.038653, 1.016754, 1.028319, 1.053694, 1.053045, 1.053833, 1.049284, 1.059823, 1.070268, 1.072526, 1.044887, 1.057183, 1.065433, 1.063596, 1.064538, 1.054008, 1.049272, 1.043432, 1.043063, 1.038183, 1.043252, 1.045953, 1.037277, 1.048698, 1.053347, 1.038724, 1.043602, 1.034671, 1.038965, 1.046812, 1.057938, 1.048518, 1.049565, 1.053764, 1.044354, 1.060233, 1.057628, 1.055139, 1.051167, 1.057685, 1.056312, 1.054138, 1.050302, 1.044353, 1.041923, 1.041630, 1.059398, 1.054789, 1.055556, 1.049660, 1.052943, 1.054170, 1.050404, 1.046996, 1.049173, 1.046862, 1.046001, 1.044051, 1.037741, 1.043914, 1.037710, 1.046996, 1.043595, 1.044177, 1.048371, 1.037249, 1.045728, 1.037360, 1.040967, 1.041006, 1.042484, 1.041703, 1.044788, 1.043382, 1.050702, 1.046653, 1.044038, 1.042449,
							1.696765, 1.618527, 1.500728, 1.321016, 1.243665, 1.583410, 1.526668, 1.431408, 1.337252, 1.309173, 1.346600, 1.280398, 1.259017, 1.247313, 1.248373, 1.244347, 1.199957, 1.177936, 1.188174, 1.169053, 1.146712, 1.112890, 1.134485, 1.102765, 1.140933, 1.133569, 1.098332, 1.087773, 1.106569, 1.097905, 1.093463, 1.103829, 1.125435, 1.131720, 1.128739, 1.098952, 1.098225, 1.100396, 1.102149, 1.131110, 1.135147, 1.125274, 1.118607, 1.117403, 1.119669, 1.104072, 1.095761, 1.089046, 1.081653, 1.096915, 1.113147, 1.100718, 1.084573, 1.068577, 1.062795, 1.082795, 1.079724, 1.074045, 1.061175, 1.055849, 1.040776, 1.041134, 1.032755, 1.020744, 1.019138, 1.010822, 1.008367, 0.997376, 0.992152, 0.979873, 0.974282, 0.977972, 0.969730, 0.961981, 0.955462, 0.947090, 0.942616, 0.959016, 0.954013, 0.949827, 0.939988, 0.938695, 0.932197, 0.930318, 0.924629, 0.917225, 0.916559, 0.922205, 0.927420, 0.926976, 0.921764, 0.916919, 0.910541, 0.907868, 0.912086, 0.907397, 0.904952, 0.900215, 0.898677, 0.891077, 0.884905, 0.884043, 0.886335, 0.880045, 0.874420, 0.870369, 0.869576, 0.861730, 0.865226, 0.861769, 0.856320, 0.858367, 0.857275, 0.853257, 0.846494, 0.843272, 0.843372, 0.845905, 0.848837, 0.848801, 0.843879, 0.849943, 0.844543, 0.842362, 0.837401, 0.838803, 0.832503, 0.829589, 0.829422, 0.827851, 0.825739, 0.825620, 0.822410, 0.819055, 0.816695, 0.814186, 0.813703, 0.808794, 0.807497, 0.805521, 0.804298, 0.801378, 0.803452, 0.801366, 0.796998, 0.799264, 0.796142, 0.796909, 0.796251, 0.795624, 0.793001, 0.790121, 0.790086, 0.789001, 0.785095, 0.781021, 0.779109, 0.777271, 0.776609, 0.774731, 0.773330, 0.772349, 0.768231, 0.771829, 0.773264, 0.771371, 0.770177, 0.768519, 0.768948, 0.767192, 0.769653, 0.766986, 0.765259, 0.764296, 0.760401, 0.761686, 0.759701, 0.759853, 0.758977, 0.758987, 0.756419, 0.757197, 0.756066, 0.754451, 0.752927, 0.753934, 0.756008, 0.756438, 0.759125, 0.761041, 0.760572, 0.759863, 0.758026, 0.760153, 0.758863, 0.757006, 0.755414, 0.754001, 0.756341, 0.754216, 0.753135, 0.751704, 0.750791, 0.752424, 0.751525, 0.749179, 0.748426, 0.751235, 0.750166, 0.757062, 0.755400, 0.759028, 0.756430, 0.755141, 0.754883, 0.752933, 0.751724, 0.749625, 0.748216, 0.748940, 0.748095, 0.748955, 0.748220, 0.746909, 0.745270, 0.745053, 0.743205, 0.741316, 0.741130, 0.740160, 0.739899, 0.738955, 0.738142, 0.736961, 0.736312, 0.734017, 0.731912, 0.732727, 0.734400, 0.733928, 0.733186, 0.732958, 0.731447, 0.732856, 0.731180, 0.732559, 0.731220, 0.736178, 0.734218, 0.737558, 0.735552, 0.733413, 0.735043, 0.735064, 0.735390, 0.732728, 0.732689, 0.732448, 0.731313, 0.730085, 0.730384, 0.729895, 0.729388, 0.728960, 0.728602, 0.731952, 0.730272, 0.729878, 0.730865, 0.728150, 0.728284, 0.726421, 0.727054, 0.728598, 0.728710, 0.729007, 0.727001, 0.727340, 0.725367, 0.725695, 0.723418, 0.721595, 0.721434, 0.721338, 0.724294, 0.723900, 0.722160, 0.722209, 0.722292, 0.720954, 0.720372, 0.719167, 0.722816, 0.721823,
							5.903611, 5.285244, 4.987709, 4.501346, 4.226351, 4.044659, 3.699906, 3.584231, 3.585851, 3.378741, 3.334130, 3.214704, 3.260113, 3.125704, 3.076525, 3.038321, 2.958443, 2.836327, 2.840795, 2.739131, 2.681919, 2.675469, 2.646787, 2.603289, 2.567408, 2.526555, 2.483007, 2.441673, 2.447835, 2.394667, 2.392520, 2.328804, 2.287505, 2.250101, 2.249055, 2.245618, 2.151067, 2.139267, 2.079821, 2.114514, 2.096380, 2.061396, 2.086738, 2.157771, 2.094314, 2.061422, 2.066436, 2.042137, 2.145901, 2.137449, 2.126247, 2.105614, 2.130025, 2.189752, 2.165215, 2.144706, 2.134471, 2.110191, 2.080224, 2.060430, 2.041587, 2.026195, 2.035111, 2.015884, 2.041682, 2.021007, 2.039575, 2.025040, 2.012058, 1.991188, 1.978914, 1.959116, 1.937281, 1.926618, 1.906398, 1.881911, 1.862079, 1.840413, 1.826201, 1.804165, 1.786142, 1.635367, 1.625281, 1.614813, 1.613628, 1.609600, 1.606160, 1.596679, 1.619424, 1.630693, 1.627541, 1.622297, 1.612716, 1.606460, 1.599604, 1.599425, 1.592439, 1.580510, 1.571425, 1.572325, 1.564255, 1.562518, 1.557950, 1.551860, 1.556231, 1.547762, 1.549814, 1.551561, 1.554217, 1.554905, 1.541944, 1.529265, 1.526317, 1.520370, 1.521296, 1.550303, 1.539192, 1.533165, 1.527068, 1.520272, 1.509882, 1.501906, 1.494326, 1.484870, 1.501706, 1.477319, 1.507169, 1.500819, 1.498566, 1.501631, 1.508034, 1.505013, 1.502449, 1.508428, 1.512866, 1.510832, 1.505967, 1.521516, 1.514333, 1.516053, 1.513019, 1.506398, 1.498615, 1.499828, 1.494775, 1.486291, 1.481309, 1.492429, 1.490455, 1.485102, 1.478227, 1.478688, 1.471335, 1.461974, 1.417562, 1.410498, 1.405262, 1.397507, 1.393056, 1.385059, 1.383729, 1.377294, 1.381058, 1.379750, 1.390401, 1.383612, 1.382532, 1.385206, 1.380777, 1.376055, 1.381150, 1.377343, 1.370306, 1.368197, 1.367133, 1.391809, 1.393806, 1.394056, 1.409151, 1.404284, 1.396703, 1.379018, 1.404097, 1.373975, 1.368621, 1.386495, 1.387703, 1.382861, 1.377140, 1.372161, 1.366275, 1.359498, 1.355298, 1.360412, 1.345985, 1.348442, 1.359717, 1.364038, 1.357359, 1.352827, 1.347096, 1.345674, 1.343131, 1.337304, 1.355214, 1.353362, 1.351987, 1.349084, 1.348268, 1.351754, 1.355554, 1.356349, 1.350320, 1.352733, 1.348330, 1.349867, 1.344932, 1.346669, 1.341380, 1.346023, 1.348786, 1.345311, 1.348369, 1.347707, 1.350329, 1.347660, 1.351353, 1.346786, 1.351089, 1.346148, 1.346138, 1.354543, 1.339770, 1.343531, 1.338878, 1.366030, 1.340928, 1.370666, 1.363174, 1.365852, 1.365110, 1.368694, 1.363086, 1.367441, 1.362337, 1.364872, 1.368082, 1.370379, 1.370639, 1.372220, 1.379747, 1.383255, 1.386796, 1.384258, 1.382491, 1.378737, 1.384840, 1.391937, 1.394687, 1.385488, 1.377588, 1.388625, 1.383608, 1.381769, 1.375875, 1.378937, 1.380998, 1.385215, 1.382480, 1.379891, 1.375111, 1.372376, 1.372028, 1.363735, 1.363478, 1.359939, 1.354629, 1.350748, 1.349379, 1.346512, 1.341892, 1.337724, 1.337112, 1.332757, 1.329467, 1.319465, 1.330312, 1.326304, 1.321928, 1.328353, 1.326376, 1.330738, 1.329674, 1.338217;
    };
	
	// This allows you to run only a subset of the possible K
	//VectorXi fixed_knns(111);  
    //int cnt = 0;
    //for (int i = KMIN; i < 31; ++i)
    //{
    //  fixed_knns(cnt) = i;
    //  cnt = cnt + 1;
    //};
    //for (int i = 32; i < 101; i=i+2)
    //{
    //  fixed_knns(cnt) = i;
    //  cnt = cnt + 1;
    //};
    //for (int i = 103; i < 170; i=i+3)
    //{
    //  fixed_knns(cnt) = i;
    //  cnt = cnt + 1;
    //};
    //for (int i = 173; i < 234; i=i+4)
    //{
    //  fixed_knns(cnt) = i;
    //  cnt = cnt + 1;
    //};
    //for (int i = 238; i < KMAX+1; i=i+5)
    //{
    //  fixed_knns(cnt) = i;
    //  cnt = cnt + 1;
    //};
	// If you want to run all K, use this instead:
    VectorXi fixed_knns(KMAX-KMIN+1);  
    int cnt = 0;
    for (int i = KMIN; i < KMAX+1; ++i)
    {
      fixed_knns(cnt) = i;
      cnt = cnt + 1;
    };
    int maxK = fixed_knns.maxCoeff();
    int minK = fixed_knns.minCoeff();
	
	// Put the nearest neighbor points into one matrix
	MatrixXf subCloudMax(KMAX,3);
	VectorXi subCloudMax_indices(KMAX);
	for (int i = 0; i < KMAX; i++)
	{
		subCloudMax(i,0) = ptx[i];
		subCloudMax(i,1) = pty[i];
		subCloudMax(i,2) = ptz[i];
		subCloudMax_indices(i) = i;
	}
	
    // NOTE: Remainder of this is pretty much just copy-pasted from Alex's code
    
	// These variables store information about each K neighborhood
	MatrixXf VectorNormals_perK(fixed_knns.size(),3);
	VectorXf L1L0_perK(fixed_knns.size());
	VectorXi NumberOfOutliers_perK(fixed_knns.size());
	VectorXf varDist_perK(fixed_knns.size());
	VectorXi realK_perK(fixed_knns.size());
	VectorXi fullK_perK(fixed_knns.size());
	VectorXi iterations_outliers_removal_perK(fixed_knns.size());
	MatrixXf meanPoint_perK(fixed_knns.size(),3);
	MatrixXf membersK_perK(fixed_knns.size(),KMAX);
	// these matrices will change size (But should they, really? -- K.E.)
	MatrixXf SubsetK;
	MatrixXf SubsetK_orig;
	VectorXi SubsetK_indices;
	VectorXi SubsetK_orig_indices;
	MatrixXf SubsetKcentred;
	Matrix3f cov;
	
	int K;
	int iterations = 0;
	
	// LOOP OVER DIFFERENT K-SIZES (from minK to maxK).
	// This allows subsampling k, so you don't run every possible value from minK-maxK.
	for (int iK = 0; iK < fixed_knns.size(); iK++)
    {
		// K = minK+iK; // size of the KNN neighbourhood   
		K = fixed_knns(iK);
		VectorXf mean_point(3);
		
		//select K closest points
		SubsetK = subCloudMax.block(0, 0, K, 3); // select K first rows; since they are already 
                                                 // sorted by distance to the SearchPoints
                                                 // SubsetK will contain K closest points
		SubsetK_indices = subCloudMax_indices.head(K);
        SubsetK_orig = SubsetK; // subsetK will change later (remove outliers), lets keep the original just in case
		SubsetK_orig_indices = SubsetK_indices;
		
        //**************** REMOVE OUTLIERS HERE
        // 1) calculate distance of all points on the plane defined by normal
        // 2) calculate std of distances
        // 3) remove points, for which abs(dist) > mean_dist +/- 3*std
        // Note: size of the sub-cloud will change after outlier removal
        bool outliersFlag = true;
        int n_of_iterations_during_outlier_removal = 0; // counter

        float stdDist; // standard deviation of distances 
        float varDist;
        //float dist_mean;
        Vector3f vn;
        Vector3f eigenvalues;

        do
        {
			n_of_iterations_during_outlier_removal = n_of_iterations_during_outlier_removal+1;
			
            // calculate eigen values/vectors
			SubsetKcentred = SubsetK.rowwise() - SubsetK.colwise().mean();
			cov = (SubsetKcentred.adjoint() * SubsetKcentred) / (SubsetK.rows()-1); // covariance
            SelfAdjointEigenSolver<Matrix3f> es(3);
            es.compute(cov);
            vn = es.eigenvectors().col(0); // local normal vector
            eigenvalues = es.eigenvalues();   
			
            // find mean point of the sub-cloud
            // notice - it is not the same as the seed point, around which the subcloud was constructed
            // notice - the seed point can be removed as an outlier
            mean_point(0) = SubsetK.col(0).mean();
            mean_point(1) = SubsetK.col(1).mean();
            mean_point(2) = SubsetK.col(2).mean();
            float meanP_VN_dot = mean_point(0)*vn(0) + mean_point(1)*vn(1) + mean_point(2)*vn(2); // dot product of mean point and vector normal

            // calculate distance of every point to the plane
            float dist[SubsetK.rows()]; // distances for every point to the local plane, size will change
            float cum_sq_dist = 0; // sum of squared distances
            for (int i = 0; i < SubsetK.rows(); i++)
            {
				dist[i] = SubsetK(i,0)*vn(0) + SubsetK(i,1)*vn(1) + SubsetK(i,2)*vn(2) - meanP_VN_dot; // distance to the local plain (projection on the normal minus dot product of mean point and vn)
                cum_sq_dist = cum_sq_dist + dist[i]*dist[i];
            }
            //dist_mean2 = dist.mean(); // should be 0; do sanity check here later
            // variance and standard deviation of distances to the local plane:
            varDist = cum_sq_dist/(SubsetK.rows() - 3); // MIND N-3 in denominator. Note: mean value must be 0, thus formula should be correct
            stdDist = sqrt(varDist);
            
            // find outliers
            // VectorXf outlier_index(SubsetK.rows());
            int SubsetK_size = SubsetK.rows(); // SubsetK may change size in the loop
            outliersFlag = false;
	        int outliers_counter = 0; // counter
            for (int i = 0; i < SubsetK_size; i++)
            {
				//if (prj_vn(i) > prj_vn_mean + 3*stdDist || prj_vn(i) < prj_vn_mean - 3*stdDist) // outliers condition
                if (abs(dist[i]) > sigmaMultiplier*stdDist) // outliers condition
				{
					unsigned int numRows = SubsetK.rows()-1;
                    unsigned int numCols = SubsetK.cols();
                    unsigned int rowToRemove = i - outliers_counter;
                    int n = numRows - rowToRemove;

                    ///////////// REMOVE ROW, i.e. outlier point
                    if( rowToRemove < numRows )
					{
						SubsetK.block(rowToRemove, 0, n, numCols) = SubsetK.block(rowToRemove+1, 0, n, numCols);
                    }
					SubsetK.conservativeResize(numRows, numCols);
					
                    ////////// REMOVE CORRESPONDING INDEX
                    // remove i-th element from the vector of indices SubsetK_indices:
                    if( rowToRemove < numRows )
					{
						SubsetK_indices.segment(rowToRemove, n) = SubsetK_indices.tail(n);
                    }
					SubsetK_indices.conservativeResize(numRows);
					outliers_counter = outliers_counter+1;
                    outliersFlag = true;
				}
            }
		} while(outliersFlag);
		// END OF OUTLIERS REMOVAL SCRIPT
        
        // Save the final subset of K points
        for (int i = 0; i < KMAX; i++)
        {
            membersK_perK(iK,i) = 0;
        }
        for (int i = 0; i < SubsetK_indices.size(); i++)
        {
            membersK_perK(iK,SubsetK_indices(i)) = 1;
        }
        
		iterations = iterations + n_of_iterations_during_outlier_removal;
		// mean point will be needed for calculating intersection point between view vector and local plane (the local plane will be placed in the middle of the subcloud)
        meanPoint_perK(iK, 0) = mean_point(0);
        meanPoint_perK(iK, 1) = mean_point(1);
        meanPoint_perK(iK, 2) = mean_point(2);
		
		NumberOfOutliers_perK(iK) = SubsetK_orig.rows() - SubsetK.rows();
		varDist_perK(iK) = varDist;
		realK_perK(iK) 	 = SubsetK.rows();
		fullK_perK(iK)   = K;
		iterations_outliers_removal_perK(iK) = n_of_iterations_during_outlier_removal;
		L1L0_perK(iK) = eigenvalues(1)/eigenvalues(2); //second largest eigenvalue divided by the largest 

        // NOTE: I don't think this step works as intended
		VectorNormals_perK.row(iK) = vn;
        float flip_normal_flg = VectorNormals_perK(iK,0) * x + VectorNormals_perK(iK,1) * y + VectorNormals_perK(iK,2) * z;
        if (flip_normal_flg > 0)
        {
			VectorNormals_perK(iK,0) = -VectorNormals_perK(iK,0);
            VectorNormals_perK(iK,1) = -VectorNormals_perK(iK,1);
            VectorNormals_perK(iK,2) = -VectorNormals_perK(iK,2);
		}

	} //end of the loop over different K-sizes
	
	// eliminate elements with L1/L0 < 0.3 (degenerative neighborhood condition):
	for (int i=0; i<L1L0_perK.size(); i++)
	{
		if (L1L0_perK(i) < minL1L0)
		{
			varDist_perK(i) = 0; // make sure that such cases will never make it above threshold, and thus will be rejected
		}
	}

	// find closest training data (here I use data from 4 distances: 2.5, 5, 10, 25m)
	float SearchPoint_Distance = sqrt(x*x + y*y + z*z); // SearchPoint_Distance
	VectorXf targets_dist(4);
	targets_dist(0) = abs(2.5 - SearchPoint_Distance);
	targets_dist(1) = abs(5 - SearchPoint_Distance);
	targets_dist(2) = abs(10 - SearchPoint_Distance);
	targets_dist(3) = abs(25 - SearchPoint_Distance);
	// targets_dist(4) = abs(50 - SearchPoint_Distance); // do not trust training data from targets further than 50m.
	// targets_dist(5) = abs(100 - SearchPoint_Distance);
	int ThresholdDistIndex;
	float tmp = targets_dist.minCoeff(&ThresholdDistIndex);

	// Original Muryy code: the optimal K is where varDist_perK is the smallest, but above threshold
	// New threshold (Elder): the optimal K is the smallest K where varDist_perK is above threshold
	int bestK_index;
	//float var_tmp = 1000000;
	float k_real_tmp = 1000000;
	bool at_least_one_point_above_threshold = false;
	for (int iK = 0; iK < fixed_knns.size(); iK++)
	{
		// ORIGINAL THRESHOLD
		// NB: thresholds were calculated for k = 7, 8, 9 ,...., 300; the length of threshold vector is 294
		//if ((varDist_perK(iK) > var_threshold(ThresholdDistIndex, realK_perK(iK) - KMIN)/1000000) && (varDist_perK(iK) < var_tmp)) // NB: need to divide by 1 000 000, that is how thresholds were saved: values were too small and I multiplied them by 1 000 000
		
		// NEW THRESHOLD
		// NB: thresholds were calculated for k = 7, 8, 9 ,...., 300; the length of threshold vector is 294
		if ((varDist_perK(iK) > var_threshold(ThresholdDistIndex, realK_perK(iK) - KMIN)/1000000) && (realK_perK(iK) < k_real_tmp)) // NB: need to divide by 1 000 000, that is how thresholds were saved: values were too small and I multiplied them by 1 000 000
		{
			//var_tmp = varDist_perK(iK);
			k_real_tmp = realK_perK(iK);
           	bestK_index = iK;
           	at_least_one_point_above_threshold = true;
        }
	}
	if (!at_least_one_point_above_threshold) // in this case take the largest neighbourhood
	{
		bestK_index = fixed_knns.size() - 1;
	}

	// Output variables for selected k
	knn = realK_perK(bestK_index); // final k, after removing outliers
	//knn = fullK_perK(bestK_index); // this would be the k before outlier removal -- DO NOT REPORT THIS
	// L1L0 = L1L0_perK(bestK_index); // if you want to output final L1/L0 ratio, here it is
	
	// Note that the "no points above threshold" condition also occurs when all neighborhoods are degenerate
	// If that is what happened, return [0 0 0] as mean and norm, otherwise return the norm and mean from the best k
	if (L1L0_perK(bestK_index) >= minL1L0)
	{
        for (int i = 0; i < 3; i++)
        {
            norm[i] = VectorNormals_perK(bestK_index,i);
            mean[i] = meanPoint_perK(bestK_index,i);
        }
        for (int i = 0; i < KMAX; i++)
        {
            membersK[i] = membersK_perK(bestK_index,i);
        }
	}
}

int PlaneFit::return_k()
{
	return knn;
}

vector<double> PlaneFit::return_norm()
{
	return norm;
}

vector<double> PlaneFit::return_mean()
{
	return mean;
}

vector<bool> PlaneFit::return_members()
{
	return membersK;
}

/****************************/

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	double *x0, *y0, *z0;
	double *NNx, *NNy, *NNz;
	size_t nn;
	int k;
	vector<double> n;
	vector<double> m;
    vector<bool> isK;
	double *pointer;
	mwSize index;

	// Check for proper number of arguments
	if (nrhs != 6)
	{
		mexErrMsgIdAndTxt("MATLAB:planefit:nargin", "PLANEFIT requires 6 input arguments.");
	}
	else if (nlhs < 3)
	{
		mexErrMsgIdAndTxt("MATLAB:planefit:nargout", "PLANEFIT requires 3 or 4 output arguments.");
	}

	// Check that the number of neighbor points in the input is as expected
	nn = mxGetM(prhs[3]);
	if (nn != KMAX)
	{
		mexErrMsgIdAndTxt("MATLAB:planefit:inputError", "PLANEFIT wrong number of neighbor x values.");
	}
	nn = mxGetM(prhs[4]);
	if (nn != KMAX)
	{
		mexErrMsgIdAndTxt("MATLAB:planefit:inputError", "PLANEFIT wrong number of neighbor y values.");
	}
	nn = mxGetM(prhs[5]);
	if (nn != KMAX)
	{
		mexErrMsgIdAndTxt("MATLAB:planefit:inputError", "PLANEFIT wrong number of neighbor z values.");
	}

	// Handle inputs
	x0 = (double *) mxGetPr(prhs[0]);
	y0 = (double *) mxGetPr(prhs[1]);
	z0 = (double *) mxGetPr(prhs[2]);
	NNx = mxGetPr(prhs[3]);
	NNy = mxGetPr(prhs[4]);
	NNz = mxGetPr(prhs[5]);
	
	// Set input values in the PlaneFit object
	PlaneFit *d = new PlaneFit; // Create an empty PlaneFit object
	d->set_data(*x0,*y0,*z0,NNx,NNy,NNz); // Set variables
	//d->display(); // check input values
	
	// Run plane fit
	d->find_best_k();
	//d->display(); // check output values
	
	// Get output values from the PlaneFit object
	k = d->return_k();
	n = d->return_norm();
	m = d->return_mean();
	if (nlhs = 4)
	{
        isK = d->return_members();
    }
	delete(d);
	
	// Handle outputs
	plhs[0] = mxCreateDoubleMatrix(1,1,mxREAL);
    *mxGetPr(plhs[0]) = (double) k;
	
    plhs[1] = mxCreateNumericMatrix(1,3,mxDOUBLE_CLASS,mxREAL);
    pointer = mxGetPr(plhs[1]);
    for ( index = 0; index < 3; index++ ) {
        pointer[index] = n[index];
    }
	
    plhs[2] = mxCreateNumericMatrix(1,3,mxDOUBLE_CLASS,mxREAL);
    pointer = mxGetPr(plhs[2]);
    for ( index = 0; index < 3; index++ ) {
        pointer[index] = m[index];
    }

	// Optional output: list of points in final neighborhood
	if (nlhs = 4)
	{
		plhs[3] = mxCreateNumericMatrix(KMAX,1,mxDOUBLE_CLASS,mxREAL);
		pointer = mxGetPr(plhs[3]);
		for ( index = 0; index < KMAX; index++ ) {
			pointer[index] = (double) isK[index];
		}
	}
	
	flush(cout);
	return;
}